image: node:12-alpine
definitions:
  steps:
    - step: &deploy-ecs
          name: "Deploy ECS"
          services:
            - docker
          caches:
            - node
            - pip
            - docker
          script:
            - apk add py3-pip rsync
            - pip3 install -U awscli 
            - npm install -g typescript node-pre-gyp
            - npm install
            - npm run build
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}
            - export AWS_DEFAULT_REGION=us-east-1
            - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPO}
            - docker build -t ${ECR_REPO}/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}-restful-api:latest --build-arg environment=${BITBUCKET_DEPLOYMENT_ENVIRONMENT} .
            - docker push ${ECR_REPO}/${BITBUCKET_DEPLOYMENT_ENVIRONMENT}-restful-api:latest
            - aws ecs update-service --cluster ${BITBUCKET_DEPLOYMENT_ENVIRONMENT}-sportsvisio --service api --force-new-deployment --region us-east-1
    - step: &deploy-serverless
          name: "Deploy Serverless Stack"
          caches:
            - node
          script:
            - npm install -g serverless typescript node-pre-gyp
            - npm install
            - serverless config credentials --provider aws --key ${AWS_ACCESS_KEY} --secret ${AWS_SECRET_KEY}
            - serverless deploy --stage ${BITBUCKET_DEPLOYMENT_ENVIRONMENT}
    - step: &test
        name: "Run test suite"
        caches:
            - node
        script:
          - npm install -g jest @nestjs/cli node-pre-gyp
          - npm install
          - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
          - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}
          - export AWS_DEFAULT_REGION=us-east-1
          - npm run test
pipelines:
  branches:
    master-dev:
      - step: 
          <<: *deploy-ecs
          deployment: dev    
    master-qa:
      - step: 
          <<: *deploy-ecs
          deployment: qa